//
// Created by Sherman Chen on 2020-03-17.
//

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>

#include <getopt.h>             /* getopt_long() */

#include <unistd.h>
#include <errno.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <sys/time.h>
#include <sys/mman.h>


#include <math.h>
#include <float.h>

const static unsigned char dht_data[] = {
        0xff, 0xc4, 0x01, 0xa2, 0x00, 0x00, 0x01, 0x05, 0x01, 0x01, 0x01, 0x01,
        0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02,
        0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x01, 0x00, 0x03,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
        0x0a, 0x0b, 0x10, 0x00, 0x02, 0x01, 0x03, 0x03, 0x02, 0x04, 0x03, 0x05,
        0x05, 0x04, 0x04, 0x00, 0x00, 0x01, 0x7d, 0x01, 0x02, 0x03, 0x00, 0x04,
        0x11, 0x05, 0x12, 0x21, 0x31, 0x41, 0x06, 0x13, 0x51, 0x61, 0x07, 0x22,
        0x71, 0x14, 0x32, 0x81, 0x91, 0xa1, 0x08, 0x23, 0x42, 0xb1, 0xc1, 0x15,
        0x52, 0xd1, 0xf0, 0x24, 0x33, 0x62, 0x72, 0x82, 0x09, 0x0a, 0x16, 0x17,
        0x18, 0x19, 0x1a, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x34, 0x35, 0x36,
        0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a,
        0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66,
        0x67, 0x68, 0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a,
        0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94, 0x95,
        0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8,
        0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xc2,
        0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4, 0xd5,
        0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,
        0xe8, 0xe9, 0xea, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9,
        0xfa, 0x11, 0x00, 0x02, 0x01, 0x02, 0x04, 0x04, 0x03, 0x04, 0x07, 0x05,
        0x04, 0x04, 0x00, 0x01, 0x02, 0x77, 0x00, 0x01, 0x02, 0x03, 0x11, 0x04,
        0x05, 0x21, 0x31, 0x06, 0x12, 0x41, 0x51, 0x07, 0x61, 0x71, 0x13, 0x22,
        0x32, 0x81, 0x08, 0x14, 0x42, 0x91, 0xa1, 0xb1, 0xc1, 0x09, 0x23, 0x33,
        0x52, 0xf0, 0x15, 0x62, 0x72, 0xd1, 0x0a, 0x16, 0x24, 0x34, 0xe1, 0x25,
        0xf1, 0x17, 0x18, 0x19, 0x1a, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x35, 0x36,
        0x37, 0x38, 0x39, 0x3a, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a,
        0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x63, 0x64, 0x65, 0x66,
        0x67, 0x68, 0x69, 0x6a, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a,
        0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x92, 0x93, 0x94,
        0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7,
        0xa8, 0xa9, 0xaa, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba,
        0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xd2, 0xd3, 0xd4,
        0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7,
        0xe8, 0xe9, 0xea, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa
};

int insert_huffman(const void *in_buf, int buf_size, const void *out_buf) {
    int pos = 0;
    int size_start = 0;
    char *pcur = (char *) in_buf;
    char *pdeb = (char *) in_buf;
    char *plimit = (char *) in_buf + buf_size;
    char *jpeg_buf = (char *) out_buf;
    //fprintf(stderr, "pcur: 0x%x, plimit: 0x%x jpeg_buf: 0x%x, buf_size: %d\n", pcur, plimit, jpeg_buf, buf_size);
    /* find the SOF0(Start Of Frame 0: 0xFFC0) of JPEG */
    size_t i = 0;
    while ((((pcur[0] << 8) | pcur[1]) != 0xffc0) && (pcur < plimit)) {
        //---- dbg
        unsigned char c0 = pcur[0];
        unsigned char c1 = pcur[1];
        uint16_t d = (c0 << 8) | c1;
        if (d == 0xffd8) {
            LOGI("  Found jpg start FFD8 at i=%d", i);
        }
        if (d == 0xffd9)
            LOGI("  Found jpg end FFD9 at i=%d", i);

        //----
        pcur++;

    }

    /* SOF0 of JPEG exist */
    if (pcur < plimit) {
        if (jpeg_buf != NULL) {
            //fprintf(stderr, ">");
            /* insert huffman table after SOF0 */
            size_start = pcur - pdeb;
            memcpy(jpeg_buf, in_buf, size_start);
            pos += size_start;
            memcpy(jpeg_buf + pos, dht_data, sizeof(dht_data));
            pos += sizeof(dht_data);
            memcpy(jpeg_buf + pos, pcur, buf_size - size_start);
            pos += buf_size - size_start;
            return pos;
        }
    } else {
        LOGE("Start of JPEG frame FFC0 not found");
    }
    return 0;
}

//----------
bool store_MJPG_image(const char *fileName, const void *start, int size) {
    FILE *f;
    char *pBuf = (char *) start;
    bool bFree = false;
    int image_size = 0;

    //-----

    //------
    // check if it's normal JPEG start with FFD8
    const uint8_t c0 = pBuf[0];
    const uint8_t c1 = pBuf[1];
    if (c0 == 0xFF && c1 == 0xD8) {
        LOGI("Normal JPEG start FFD8 found");
        image_size = size;
    }
        //----- Insert huffman for Android MTK
    else {
        LOGI("Serach header and Insert huffman...");
        pBuf = (char *) malloc(size * 2);
        if (pBuf == nullptr) {
            LOGE("Malloc mjpgBuf error.\n");
            return false;
        }
        bFree = true;
        image_size = insert_huffman(start, size, pBuf);
    }

    if (image_size >= (size * 2)) {
        LOGE("Allocate mjpg memory too little.\n");
    }
    //fprintf(stderr, "image_size: %d.\n",image_size);
    if (image_size) {
        f = fopen(fileName, "wb");
    } else {
        f = 0;
    }
    //-------
    if (f) {
        size_t r = fwrite(pBuf, image_size, 1, f);
        if (r) { LOGI("Save to jpeg file OK : %s , size=%d", fileName, image_size); }
        else { LOGE("Save to jpeg file failed : %s ", fileName); }
        fclose(f);
    } else {

        LOGE("Save to jpeg file failed, can't open 'fd': %s ", fileName);

        return false;
    }

    //-------
    if (bFree && (pBuf != nullptr))
        free(pBuf);
    return true;
    //	fflush(stderr);
    //	fflush(stdout);
}
//-----------------------

